@startuml
scale max 10000 width
class Main {
+static void main(String[] args)
}
Main --down[#AAA]-o world.World
Main -down[#AAA]--o humans.Aborigine
Main -down[#AAA]-o humans.Aborigine
Main -down[#AAA]--o humans.Aborigine
Main -down[#AAA]-o humans.Aborigine
Main --down[#AAA]-o teams.TeamOfAborigines
Main -down[#AAA]--o nature.Bonfire
Main -down[#AAA]-o nature.Monolith
Main -down[#AAA]--o interactionWithPoliceman.Figurine
Main -down[#AAA]-o nature.Gallows


enum world.Locations {
SWAMP,
POLICE_STATION
}


class world.World {
-Locations location
}
world.World --down[#AAA]-o nature.Island

class weapons.Choose {
+Weapons random()

}


enum weapons.Weapons {
STICK,
KNIFE,
REVOLVER
}


class war.MyThread {
+void stop()
}


class war.War {
-TeamOfAborigines t1
-TeamOfPolicemen t2
+void go() throws AmountException, ClonesException
}
war.War -down[#AAA]--o exception.checking.Amount
war.War -down[#AAA]-o exception.AmountException
war.War -down[#AAA]--o exception.checking.Clones
war.War -down[#AAA]-o exception.ClonesException
war.War --down[#AAA]-o war.MyThread
war.War -down[#AAA]--o weapons.Choose

abstract class teams.Team<H extends humans.Human> {
-final ArrayList<H> team = new ArrayList<>()
}

class teams.TeamOfAborigines extends teams.Team implements interfaces.HaveFun {
+void haveFun()
}


class teams.TeamOfPolicemen extends teams.Team implements interfaces.Feel {
+void feel(Emotions e)
}



class result.Result implements result.FindStatus {
+void show(War war)
}

interface result.FindStatus<T extends teams.Team> {
default ArrayList<String> find(T t, Status stat)
}

result.Result -down[#AAA]-o result.FindStatus

interface result.Function {
int count(int a, int b)
}


interface result.GetNames<T extends teams.Team> {
String get(T t, Status s)
}


class nature.Bodies {
+void hangDown(Gallows g)
}


class nature.Bonfire {
+void burn(TeamOfAborigines t1)
}


class nature.Gallows {
-int amount
+ void locate()
}


class nature.Island {
-String description
-int areaSize
-int amountOfTrees
+String describe()
}


class nature.Monolith {
-String material
-int height
+ void riseUp()
}


interface interfaces.Feel {
void feel(Emotions e)
}


interface interfaces.HaveFun {
void haveFun()
}


interface interfaces.Hear {
void hear(Sound s)
}


interface interfaces.Hit {
void hit(Human h)
}


interface interfaces.See {
void see(Hallucinations h)
}


interface interfaces.Take {
void take(Figurine f) throws DeadException
}


interface interfaces.TakeWeapon {
void takeWeapon(Weapons weapon)
}


enum interactionWithPoliceman.Emotions {
STUPOR,
COURAGE
}


class interactionWithPoliceman.Figurine {
-String place
}


class interactionWithPoliceman.Hallucinations {
-String description
}


class interactionWithPoliceman.Sound {
-String source
}


class humans.Aborigine extends humans.Human implements interfaces.HaveFun {
+void takeWeapon(Weapons weapon)
+void haveFun()
}


abstract class humans.Human implements interfaces.Hit, interfaces.TakeWeapon{
-String name
-double attack
-String country
-double health = 100
-Status stat = Status.ALIVE
+void hit(Human h)
}


class humans.Policeman extends humans.Human implements interfaces.Hear, interfaces.See, interfaces.Feel, interfaces.Take {
+void takeWeapon(Weapons weapon)
+void hear(Sound s)
+void see(Hallucinations h)
+void feel(Emotions e)
+void take(Figurine f) throws DeadException
}
humans.Policeman -down[#AAA]-o exception.DeadException

enum humans.Status {
ALIVE,
DEAD,
IN_CAPTIVITY
}


class exception.AmountException extends Exception {
}


class exception.DeadException extends NoSuchElementException {
}


class exception.ClonesException extends Exception {
}


class exception.checking.Amount implements exception.checking.Check {
+boolean check(TeamOfAborigines t1, TeamOfPolicemen t2)
}

class exception.checking.Clones implements exception.checking.Check {
+boolean check(TeamOfAborigines t1, TeamOfPolicemen t2)
}


interface exception.checking.Check {
boolean check(TeamOfAborigines t1, TeamOfPolicemen t2)
}

@enduml